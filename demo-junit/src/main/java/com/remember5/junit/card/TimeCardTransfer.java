/** * Copyright [2022] [remember5] * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.remember5.junit.card;import com.remember5.junit.card.category.CountCard;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import static com.remember5.junit.card.TableFormatter.formatTableRow;/** * @author wangjiahao * @date 2025/9/13 21:53 */public class TimeCardTransfer {    public static void main(String[] args) {        // 卡的详情        final CountCard countCard = new CountCard("10", "9.98", 10, "0.3");        // 计算卡的相关信息        countCard.calculateCardInfo();        // 打印卡的信息        countCard.printCardInfo();        // 模拟核销过程        System.out.println("开始核销过程：");        // 定义列宽（根据实际显示宽度调整）        int[] columnWidths = {10, 10, 10, 19};        // 表头        String[] headers = {"当前核销次数", "本次划拨金额", "当前留底资金", "累计划拨金额(含可支用)"};        List<Object[]> data = new ArrayList<>();        for (int i = 1; i <= countCard.getTotalCount(); i++) {            BigDecimal transferAmount = countCard(countCard);            data.add(new Object[]{i, transferAmount, countCard.getCurrentReserveAmount(), countCard.getCumulativeTransferAmount()});        }        // 打印表格        System.out.println(TableFormatter.formatTableRow(headers, columnWidths));        System.out.println(TableFormatter.generateSeparator(columnWidths));        for (Object[] row : data) {            System.out.println(formatTableRow(row, columnWidths));        }    }    /**     * 计算次卡     * <p>     * 次卡的计算规则和业务逻辑是: 平台属于监管平台     * 商家收了订单金额(OrderAmount),扣完手续费然后实际到账(ArrivalAmount),     * 平台会把AA分为两个类目，     * 1.留底资金(ReserveAmount) 属于平台暂时冻结的金额, 留底资金 = 订单金额 * 监管比例 (保留两位小数向下取)     * 2.可支用资金(AvailableAmount) 属于商家可自由支配的金额,可支用资金 = 到账金额 - 留底资金     * 每次核销金额 = 订单金额(OrderAmount) / 总次数(totalCount) (保留两位小数向下取)     * <p>     * <p>     * 如: 一个商品订单金额OrderAmount=10元,ArrivalAmount=9.98,reservePrecent=0.7,totalCount=10     * 那么 卡的留底资金 = 10 * 0.7 = 7元, 可支用资金 = 9.98 - 7 = 2.98元     * 每次核销金额为 10/10 = 1元     *     * @param countCard 次卡信息     */    public static BigDecimal countCard(CountCard countCard) {        // 增加核销次数        countCard.setCurrentCount(countCard.getCurrentCount() + 1);        BigDecimal transferAmount = BigDecimal.ZERO;        BigDecimal eachAmount = countCard.getEachAmount();        // 判断当前处于哪个阶段        if (countCard.getCardReserveAmount().compareTo(countCard.getCurrentReserveAmount()) == 0) {            // 可支用阶段：留底资金未动用 (卡的留底资金 = 当前的留底资金)            // 累计划拨金额 (加上当前这次划拨)            BigDecimal newCumulativeAmount = countCard.getCumulativeTransferAmount().add(eachAmount);            if (newCumulativeAmount.compareTo(countCard.getCardAvailableAmount()) <= 0) {                // 累计划拨 <= 可支用资金，直接从可支用资金划拨(不动留底)                transferAmount = eachAmount;                // 更新累计划拨金额                countCard.setCumulativeTransferAmount(                        countCard.getCumulativeTransferAmount().add(transferAmount)                );            } else {                // 累计划拨 > 可支用资金，需要动用留底资金,(累计划拨-可支用=需要划拨的钱)                transferAmount = newCumulativeAmount.subtract(countCard.getCardAvailableAmount());                // 更新账户状态                countCard.setCurrentReserveAmount(countCard.getCurrentReserveAmount().subtract(transferAmount));                // 更新累计划拨金额                countCard.setCumulativeTransferAmount(                        countCard.getCumulativeTransferAmount().add(eachAmount)                );            }            return transferAmount;        }        // 动用留底阶段：留底资金已经开始被使用        // 判断是否为最后一次        if (countCard.getCurrentCount().equals(countCard.getTotalCount())) {            // 更新累计划拨金额            countCard.setCumulativeTransferAmount(countCard.getCumulativeTransferAmount().add(countCard.getCurrentReserveAmount()));            transferAmount = countCard.getCurrentReserveAmount();            countCard.setCurrentReserveAmount(                    countCard.getCurrentReserveAmount().subtract(countCard.getCurrentReserveAmount())            );            return transferAmount;        }        if (countCard.getCurrentReserveAmount().compareTo(eachAmount) >= 0) {            // 留底资金充足，正常划拨            transferAmount = eachAmount;            countCard.setCurrentReserveAmount(countCard.getCurrentReserveAmount().subtract(eachAmount));        } else {            // 留底资金不足（最后一次），划拨所有剩余留底资金            transferAmount = countCard.getCurrentReserveAmount();            countCard.setCurrentReserveAmount(BigDecimal.ZERO);        }        // 更新累计划拨金额        countCard.setCumulativeTransferAmount(countCard.getCumulativeTransferAmount().add(transferAmount));        return transferAmount;    }}